//
//Copyright 2021 Alibaba Group Holding Limited.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: hpfs.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TaskStatus int32

const (
	// Task is pending.
	TaskStatus_PENDING TaskStatus = 0
	// Task is running.
	TaskStatus_RUNNING TaskStatus = 1
	// Task has been completed successfully.
	TaskStatus_SUCCESS TaskStatus = 2
	// Task was failed.
	TaskStatus_FAILED TaskStatus = 3
	// Task is canceling.
	TaskStatus_CANCELING TaskStatus = 4
	// Tasks was canceled.
	TaskStatus_CANCELED TaskStatus = 5
	// Status unknown.
	TaskStatus_UNKNOWN TaskStatus = 9
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "SUCCESS",
		3: "FAILED",
		4: "CANCELING",
		5: "CANCELED",
		9: "UNKNOWN",
	}
	TaskStatus_value = map[string]int32{
		"PENDING":   0,
		"RUNNING":   1,
		"SUCCESS":   2,
		"FAILED":    3,
		"CANCELING": 4,
		"CANCELED":  5,
		"UNKNOWN":   9,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hpfs_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_hpfs_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{0}
}

type BlkioKey int32

const (
	// IOPS (IO per second) read.
	BlkioKey_IOPS_READ BlkioKey = 0
	// IOPS (IO per second) write.
	BlkioKey_IOPS_WRITE BlkioKey = 1
	// BPS (bytes per second) read.
	BlkioKey_BPS_READ BlkioKey = 2
	// BPS (bytes per second) write.
	BlkioKey_BPS_WRITE BlkioKey = 3
)

// Enum value maps for BlkioKey.
var (
	BlkioKey_name = map[int32]string{
		0: "IOPS_READ",
		1: "IOPS_WRITE",
		2: "BPS_READ",
		3: "BPS_WRITE",
	}
	BlkioKey_value = map[string]int32{
		"IOPS_READ":  0,
		"IOPS_WRITE": 1,
		"BPS_READ":   2,
		"BPS_WRITE":  3,
	}
)

func (x BlkioKey) Enum() *BlkioKey {
	p := new(BlkioKey)
	*p = x
	return p
}

func (x BlkioKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlkioKey) Descriptor() protoreflect.EnumDescriptor {
	return file_hpfs_proto_enumTypes[1].Descriptor()
}

func (BlkioKey) Type() protoreflect.EnumType {
	return &file_hpfs_proto_enumTypes[1]
}

func (x BlkioKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlkioKey.Descriptor instead.
func (BlkioKey) EnumDescriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{1}
}

// Enum for error codes.
type Status_StatusCode int32

const (
	// Operation is successful.
	Status_OK Status_StatusCode = 0
	// Indicates an invalid argument.
	Status_INVALID Status_StatusCode = 1
	// Permission denied.
	Status_PERMISSION_DENIED Status_StatusCode = 2
	// File already exists.
	Status_EXISTS Status_StatusCode = 3
	// File does not exist.
	Status_NOT_EXIST Status_StatusCode = 4
	// Network error, like rpc or network failure.
	Status_NETWORK Status_StatusCode = 5
	// Unknown error.
	Status_UNKNOWN Status_StatusCode = 6
)

// Enum value maps for Status_StatusCode.
var (
	Status_StatusCode_name = map[int32]string{
		0: "OK",
		1: "INVALID",
		2: "PERMISSION_DENIED",
		3: "EXISTS",
		4: "NOT_EXIST",
		5: "NETWORK",
		6: "UNKNOWN",
	}
	Status_StatusCode_value = map[string]int32{
		"OK":                0,
		"INVALID":           1,
		"PERMISSION_DENIED": 2,
		"EXISTS":            3,
		"NOT_EXIST":         4,
		"NETWORK":           5,
		"UNKNOWN":           6,
	}
)

func (x Status_StatusCode) Enum() *Status_StatusCode {
	p := new(Status_StatusCode)
	*p = x
	return p
}

func (x Status_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hpfs_proto_enumTypes[2].Descriptor()
}

func (Status_StatusCode) Type() protoreflect.EnumType {
	return &file_hpfs_proto_enumTypes[2]
}

func (x Status_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StatusCode.Descriptor instead.
func (Status_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{4, 0}
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{0}
}

func (x *Host) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base name of the file.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Size of file, in bytes.
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// File mode.
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Modification time.
	ModTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=mod_time,json=modTime,proto3" json:"mod_time,omitempty"`
	// Is dir.
	IsDir bool `protobuf:"varint,5,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{1}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetModTime() *timestamp.Timestamp {
	if x != nil {
		return x.ModTime
	}
	return nil
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type FileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File mode, e.g. 0664
	Mode uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// File owner, either uid or user.
	//
	// Types that are assignable to Owner:
	//	*FileStats_Uid
	//	*FileStats_User
	Owner isFileStats_Owner `protobuf_oneof:"owner"`
	// File group, either gid or name.
	//
	// Types that are assignable to Group:
	//	*FileStats_Gid
	//	*FileStats_GroupName
	Group isFileStats_Group `protobuf_oneof:"group"`
	Size  uint64            `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileStats) Reset() {
	*x = FileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStats) ProtoMessage() {}

func (x *FileStats) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStats.ProtoReflect.Descriptor instead.
func (*FileStats) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{2}
}

func (x *FileStats) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (m *FileStats) GetOwner() isFileStats_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *FileStats) GetUid() uint32 {
	if x, ok := x.GetOwner().(*FileStats_Uid); ok {
		return x.Uid
	}
	return 0
}

func (x *FileStats) GetUser() string {
	if x, ok := x.GetOwner().(*FileStats_User); ok {
		return x.User
	}
	return ""
}

func (m *FileStats) GetGroup() isFileStats_Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (x *FileStats) GetGid() uint32 {
	if x, ok := x.GetGroup().(*FileStats_Gid); ok {
		return x.Gid
	}
	return 0
}

func (x *FileStats) GetGroupName() string {
	if x, ok := x.GetGroup().(*FileStats_GroupName); ok {
		return x.GroupName
	}
	return ""
}

func (x *FileStats) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type isFileStats_Owner interface {
	isFileStats_Owner()
}

type FileStats_Uid struct {
	Uid uint32 `protobuf:"varint,2,opt,name=uid,proto3,oneof"`
}

type FileStats_User struct {
	User string `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

func (*FileStats_Uid) isFileStats_Owner() {}

func (*FileStats_User) isFileStats_Owner() {}

type isFileStats_Group interface {
	isFileStats_Group()
}

type FileStats_Gid struct {
	Gid uint32 `protobuf:"varint,4,opt,name=gid,proto3,oneof"`
}

type FileStats_GroupName struct {
	GroupName string `protobuf:"bytes,5,opt,name=group_name,json=groupName,proto3,oneof"`
}

func (*FileStats_Gid) isFileStats_Group() {}

func (*FileStats_GroupName) isFileStats_Group() {}

// File represents a file.
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Flag for directory.
	IsDirectory bool `protobuf:"varint,2,opt,name=is_directory,json=isDirectory,proto3" json:"is_directory,omitempty"`
	// File stats.
	Stats *FileStats `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{3}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetIsDirectory() bool {
	if x != nil {
		return x.IsDirectory
	}
	return false
}

func (x *File) GetStats() *FileStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code.
	Code Status_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=proto.Status_StatusCode" json:"code,omitempty"`
	// Error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetCode() Status_StatusCode {
	if x != nil {
		return x.Code
	}
	return Status_OK
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute path of file to be created.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// File mode.
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// File owner, either uid or user.
	//
	// Types that are assignable to Owner:
	//	*FileRequest_Uid
	//	*FileRequest_User
	Owner isFileRequest_Owner `protobuf_oneof:"owner"`
	// File group, either gid or name.
	//
	// Types that are assignable to Group:
	//	*FileRequest_Gid
	//	*FileRequest_GroupName
	Group isFileRequest_Group `protobuf_oneof:"group"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{5}
}

func (x *FileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (m *FileRequest) GetOwner() isFileRequest_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *FileRequest) GetUid() uint32 {
	if x, ok := x.GetOwner().(*FileRequest_Uid); ok {
		return x.Uid
	}
	return 0
}

func (x *FileRequest) GetUser() string {
	if x, ok := x.GetOwner().(*FileRequest_User); ok {
		return x.User
	}
	return ""
}

func (m *FileRequest) GetGroup() isFileRequest_Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (x *FileRequest) GetGid() uint32 {
	if x, ok := x.GetGroup().(*FileRequest_Gid); ok {
		return x.Gid
	}
	return 0
}

func (x *FileRequest) GetGroupName() string {
	if x, ok := x.GetGroup().(*FileRequest_GroupName); ok {
		return x.GroupName
	}
	return ""
}

type isFileRequest_Owner interface {
	isFileRequest_Owner()
}

type FileRequest_Uid struct {
	Uid uint32 `protobuf:"varint,3,opt,name=uid,proto3,oneof"`
}

type FileRequest_User struct {
	User string `protobuf:"bytes,4,opt,name=user,proto3,oneof"`
}

func (*FileRequest_Uid) isFileRequest_Owner() {}

func (*FileRequest_User) isFileRequest_Owner() {}

type isFileRequest_Group interface {
	isFileRequest_Group()
}

type FileRequest_Gid struct {
	Gid uint32 `protobuf:"varint,5,opt,name=gid,proto3,oneof"`
}

type FileRequest_GroupName struct {
	GroupName string `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3,oneof"`
}

func (*FileRequest_Gid) isFileRequest_Group() {}

func (*FileRequest_GroupName) isFileRequest_Group() {}

type CreateFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore the create if exists. If not true, an error will be returned.
	IgnoreIfExists bool `protobuf:"varint,1,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
	// Overwrite the file if exists. If not true, leave the file not touched.
	OverwriteIfExists bool `protobuf:"varint,2,opt,name=overwrite_if_exists,json=overwriteIfExists,proto3" json:"overwrite_if_exists,omitempty"`
}

func (x *CreateFileOptions) Reset() {
	*x = CreateFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileOptions) ProtoMessage() {}

func (x *CreateFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileOptions.ProtoReflect.Descriptor instead.
func (*CreateFileOptions) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFileOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

func (x *CreateFileOptions) GetOverwriteIfExists() bool {
	if x != nil {
		return x.OverwriteIfExists
	}
	return false
}

type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Create options.
	Options *CreateFileOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// File to create.
	File *FileRequest `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	// Initial file content if not empty. If options.ignore_if_exists and
	// options.overwrite_if_exists are true, the file content will be overwritten.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFileRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CreateFileRequest) GetOptions() *CreateFileOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateFileRequest) GetFile() *FileRequest {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *CreateFileRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{8}
}

func (x *CreateFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateDirectoryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore the create if exists. If not true, an error will be returned.
	IgnoreIfExists bool `protobuf:"varint,1,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
	// Create all parent directories if necessary.
	CreateParentDirectories bool `protobuf:"varint,2,opt,name=create_parent_directories,json=createParentDirectories,proto3" json:"create_parent_directories,omitempty"`
}

func (x *CreateDirectoryOptions) Reset() {
	*x = CreateDirectoryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryOptions) ProtoMessage() {}

func (x *CreateDirectoryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryOptions.ProtoReflect.Descriptor instead.
func (*CreateDirectoryOptions) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDirectoryOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

func (x *CreateDirectoryOptions) GetCreateParentDirectories() bool {
	if x != nil {
		return x.CreateParentDirectories
	}
	return false
}

type CreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Create options.
	Options *CreateDirectoryOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// Directory to create.
	Directory *FileRequest `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDirectoryRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CreateDirectoryRequest) GetOptions() *CreateDirectoryOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateDirectoryRequest) GetDirectory() *FileRequest {
	if x != nil {
		return x.Directory
	}
	return nil
}

type CreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDirectoryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateSymbolicLinkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore if dest symbolic file/directory exists.
	IgnoreIfExists bool `protobuf:"varint,1,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
}

func (x *CreateSymbolicLinkOptions) Reset() {
	*x = CreateSymbolicLinkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSymbolicLinkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSymbolicLinkOptions) ProtoMessage() {}

func (x *CreateSymbolicLinkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSymbolicLinkOptions.ProtoReflect.Descriptor instead.
func (*CreateSymbolicLinkOptions) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{12}
}

func (x *CreateSymbolicLinkOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

type CreateSymbolicLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Create options.
	Options *CreateSymbolicLinkOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// Source file/directory path.
	DestPath string `protobuf:"bytes,3,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`
	// Destination file/directory path.
	LinkPath *FileRequest `protobuf:"bytes,4,opt,name=link_path,json=linkPath,proto3" json:"link_path,omitempty"`
}

func (x *CreateSymbolicLinkRequest) Reset() {
	*x = CreateSymbolicLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSymbolicLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSymbolicLinkRequest) ProtoMessage() {}

func (x *CreateSymbolicLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSymbolicLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateSymbolicLinkRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{13}
}

func (x *CreateSymbolicLinkRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CreateSymbolicLinkRequest) GetOptions() *CreateSymbolicLinkOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateSymbolicLinkRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

func (x *CreateSymbolicLinkRequest) GetLinkPath() *FileRequest {
	if x != nil {
		return x.LinkPath
	}
	return nil
}

type CreateSymbolicLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateSymbolicLinkResponse) Reset() {
	*x = CreateSymbolicLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSymbolicLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSymbolicLinkResponse) ProtoMessage() {}

func (x *CreateSymbolicLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSymbolicLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateSymbolicLinkResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{14}
}

func (x *CreateSymbolicLinkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemoveOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore if file/directory not exists.
	IgnoreIfNotExists bool `protobuf:"varint,1,opt,name=ignore_if_not_exists,json=ignoreIfNotExists,proto3" json:"ignore_if_not_exists,omitempty"`
	// Recursively
	Recursive bool `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *RemoveOptions) Reset() {
	*x = RemoveOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOptions) ProtoMessage() {}

func (x *RemoveOptions) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOptions.ProtoReflect.Descriptor instead.
func (*RemoveOptions) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveOptions) GetIgnoreIfNotExists() bool {
	if x != nil {
		return x.IgnoreIfNotExists
	}
	return false
}

func (x *RemoveOptions) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type ListDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Directory path to list.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListDirectoryRequest) Reset() {
	*x = ListDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryRequest) ProtoMessage() {}

func (x *ListDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{16}
}

func (x *ListDirectoryRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ListDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Files under requested directory.
	Files []*FileInfo `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListDirectoryResponse) Reset() {
	*x = ListDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryResponse) ProtoMessage() {}

func (x *ListDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{17}
}

func (x *ListDirectoryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDirectoryResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type RemoveDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Remove options.
	Options *RemoveOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// Directory path to remove.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveDirectoryRequest) Reset() {
	*x = RemoveDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirectoryRequest) ProtoMessage() {}

func (x *RemoveDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirectoryRequest.ProtoReflect.Descriptor instead.
func (*RemoveDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveDirectoryRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *RemoveDirectoryRequest) GetOptions() *RemoveOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RemoveDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveDirectoryResponse) Reset() {
	*x = RemoveDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirectoryResponse) ProtoMessage() {}

func (x *RemoveDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirectoryResponse.ProtoReflect.Descriptor instead.
func (*RemoveDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveDirectoryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemoveFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Remove options.
	Options *RemoveOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// File path to remove.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveFileRequest) Reset() {
	*x = RemoveFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFileRequest) ProtoMessage() {}

func (x *RemoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFileRequest.ProtoReflect.Descriptor instead.
func (*RemoveFileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveFileRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *RemoveFileRequest) GetOptions() *RemoveOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RemoveFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoveFileResponse) Reset() {
	*x = RemoveFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFileResponse) ProtoMessage() {}

func (x *RemoveFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFileResponse.ProtoReflect.Descriptor instead.
func (*RemoveFileResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type TruncateFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore truncate if file not exists.
	IgnoreIfNotExists bool `protobuf:"varint,1,opt,name=ignore_if_not_exists,json=ignoreIfNotExists,proto3" json:"ignore_if_not_exists,omitempty"`
}

func (x *TruncateFileOptions) Reset() {
	*x = TruncateFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateFileOptions) ProtoMessage() {}

func (x *TruncateFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateFileOptions.ProtoReflect.Descriptor instead.
func (*TruncateFileOptions) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{22}
}

func (x *TruncateFileOptions) GetIgnoreIfNotExists() bool {
	if x != nil {
		return x.IgnoreIfNotExists
	}
	return false
}

type TruncateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Truncate file options.
	Options *TruncateFileOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// File path to truncate.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TruncateFileRequest) Reset() {
	*x = TruncateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateFileRequest) ProtoMessage() {}

func (x *TruncateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateFileRequest.ProtoReflect.Descriptor instead.
func (*TruncateFileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{23}
}

func (x *TruncateFileRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *TruncateFileRequest) GetOptions() *TruncateFileOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TruncateFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type TruncateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TruncateFileResponse) Reset() {
	*x = TruncateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateFileResponse) ProtoMessage() {}

func (x *TruncateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateFileResponse.ProtoReflect.Descriptor instead.
func (*TruncateFileResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{24}
}

func (x *TruncateFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemoteFsEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File service protocol. Extension point for each different sources.
	// Currently supported protocols are:
	//     1. ftp, File Transfer Protocol.
	//     2. sftp, SSH File Transfer Protocol.
	//     3. http(s), Hypertext Transfer Protocol.
	//     4. oss (aliyun), Object Storage Service of Aliyun.
	//     5. hdfs, Hadoop Distributed File System.
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Path in protocol specified format.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Parameters for authenticate.
	Auth map[string]string `protobuf:"bytes,3,rep,name=auth,proto3" json:"auth,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Other parameters.
	Other map[string]string `protobuf:"bytes,4,rep,name=other,proto3" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoteFsEndpoint) Reset() {
	*x = RemoteFsEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteFsEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFsEndpoint) ProtoMessage() {}

func (x *RemoteFsEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFsEndpoint.ProtoReflect.Descriptor instead.
func (*RemoteFsEndpoint) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{25}
}

func (x *RemoteFsEndpoint) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RemoteFsEndpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoteFsEndpoint) GetAuth() map[string]string {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RemoteFsEndpoint) GetOther() map[string]string {
	if x != nil {
		return x.Other
	}
	return nil
}

type AsyncTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trace id for task.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *AsyncTask) Reset() {
	*x = AsyncTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncTask) ProtoMessage() {}

func (x *AsyncTask) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncTask.ProtoReflect.Descriptor instead.
func (*AsyncTask) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{26}
}

func (x *AsyncTask) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type AsyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trace id for task.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *AsyncTaskRequest) Reset() {
	*x = AsyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncTaskRequest) ProtoMessage() {}

func (x *AsyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncTaskRequest.ProtoReflect.Descriptor instead.
func (*AsyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{27}
}

func (x *AsyncTaskRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type DownloadSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *RemoteFsEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *DownloadSource) Reset() {
	*x = DownloadSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSource) ProtoMessage() {}

func (x *DownloadSource) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSource.ProtoReflect.Descriptor instead.
func (*DownloadSource) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{28}
}

func (x *DownloadSource) GetEndpoint() *RemoteFsEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type DownloadTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Download sources.
	Source *DownloadSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Target path.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DownloadTask) Reset() {
	*x = DownloadTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTask) ProtoMessage() {}

func (x *DownloadTask) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTask.ProtoReflect.Descriptor instead.
func (*DownloadTask) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{29}
}

func (x *DownloadTask) GetSource() *DownloadSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DownloadTask) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Async task request.
	AsyncTask *AsyncTaskRequest `protobuf:"bytes,2,opt,name=async_task,json=asyncTask,proto3" json:"async_task,omitempty"`
	// Download tasks.
	Tasks []*DownloadTask `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{30}
}

func (x *DownloadRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *DownloadRequest) GetAsyncTask() *AsyncTaskRequest {
	if x != nil {
		return x.AsyncTask
	}
	return nil
}

func (x *DownloadRequest) GetTasks() []*DownloadTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type DownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Async task.
	Task *AsyncTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *DownloadResponse) Reset() {
	*x = DownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse) ProtoMessage() {}

func (x *DownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse.ProtoReflect.Descriptor instead.
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{31}
}

func (x *DownloadResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DownloadResponse) GetTask() *AsyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source host.
	SrcHost *Host `protobuf:"bytes,1,opt,name=src_host,json=srcHost,proto3" json:"src_host,omitempty"`
	// Destination host.
	DestHost *Host `protobuf:"bytes,2,opt,name=dest_host,json=destHost,proto3" json:"dest_host,omitempty"`
	// Async task request.
	AsyncTask *AsyncTaskRequest `protobuf:"bytes,3,opt,name=async_task,json=asyncTask,proto3" json:"async_task,omitempty"`
	// Source path.
	SrcPath string `protobuf:"bytes,4,opt,name=src_path,json=srcPath,proto3" json:"src_path,omitempty"`
	// Destination path.
	DestPath string `protobuf:"bytes,5,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{32}
}

func (x *TransferRequest) GetSrcHost() *Host {
	if x != nil {
		return x.SrcHost
	}
	return nil
}

func (x *TransferRequest) GetDestHost() *Host {
	if x != nil {
		return x.DestHost
	}
	return nil
}

func (x *TransferRequest) GetAsyncTask() *AsyncTaskRequest {
	if x != nil {
		return x.AsyncTask
	}
	return nil
}

func (x *TransferRequest) GetSrcPath() string {
	if x != nil {
		return x.SrcPath
	}
	return ""
}

func (x *TransferRequest) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Async task.
	Task *AsyncTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{33}
}

func (x *TransferResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransferResponse) GetTask() *AsyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type ShowDiskUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Path of file/directory.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ShowDiskUsageRequest) Reset() {
	*x = ShowDiskUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDiskUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDiskUsageRequest) ProtoMessage() {}

func (x *ShowDiskUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDiskUsageRequest.ProtoReflect.Descriptor instead.
func (*ShowDiskUsageRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{34}
}

func (x *ShowDiskUsageRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ShowDiskUsageRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ShowDiskUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Size in bytes.
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ShowDiskUsageResponse) Reset() {
	*x = ShowDiskUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDiskUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDiskUsageResponse) ProtoMessage() {}

func (x *ShowDiskUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDiskUsageResponse.ProtoReflect.Descriptor instead.
func (*ShowDiskUsageResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{35}
}

func (x *ShowDiskUsageResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShowDiskUsageResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ShowAsyncTaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Async task.
	Task *AsyncTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ShowAsyncTaskStatusRequest) Reset() {
	*x = ShowAsyncTaskStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAsyncTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAsyncTaskStatusRequest) ProtoMessage() {}

func (x *ShowAsyncTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAsyncTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*ShowAsyncTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{36}
}

func (x *ShowAsyncTaskStatusRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ShowAsyncTaskStatusRequest) GetTask() *AsyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type ShowAsyncTaskStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Task status.
	TaskStatus TaskStatus `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=proto.TaskStatus" json:"task_status,omitempty"`
	// Progress of transfer.
	Progress float64 `protobuf:"fixed64,3,opt,name=progress,proto3" json:"progress,omitempty"`
	// Error message.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ShowAsyncTaskStatusResponse) Reset() {
	*x = ShowAsyncTaskStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAsyncTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAsyncTaskStatusResponse) ProtoMessage() {}

func (x *ShowAsyncTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAsyncTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*ShowAsyncTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{37}
}

func (x *ShowAsyncTaskStatusResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShowAsyncTaskStatusResponse) GetTaskStatus() TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return TaskStatus_PENDING
}

func (x *ShowAsyncTaskStatusResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ShowAsyncTaskStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelAsyncTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Async task.
	Task *AsyncTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CancelAsyncTaskRequest) Reset() {
	*x = CancelAsyncTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAsyncTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAsyncTaskRequest) ProtoMessage() {}

func (x *CancelAsyncTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAsyncTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelAsyncTaskRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{38}
}

func (x *CancelAsyncTaskRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CancelAsyncTaskRequest) GetTask() *AsyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type CancelAsyncTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CancelAsyncTaskResponse) Reset() {
	*x = CancelAsyncTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAsyncTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAsyncTaskResponse) ProtoMessage() {}

func (x *CancelAsyncTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAsyncTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelAsyncTaskResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{39}
}

func (x *CancelAsyncTaskResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UploadTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *RemoteFsEndpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *UploadTarget) Reset() {
	*x = UploadTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTarget) ProtoMessage() {}

func (x *UploadTarget) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTarget.ProtoReflect.Descriptor instead.
func (*UploadTarget) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{40}
}

func (x *UploadTarget) GetEndpoint() *RemoteFsEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Async task request.
	AsyncTask *AsyncTaskRequest `protobuf:"bytes,2,opt,name=async_task,json=asyncTask,proto3" json:"async_task,omitempty"`
	// Target file path.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Upload target.
	Target *UploadTarget `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{41}
}

func (x *UploadRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *UploadRequest) GetAsyncTask() *AsyncTaskRequest {
	if x != nil {
		return x.AsyncTask
	}
	return nil
}

func (x *UploadRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UploadRequest) GetTarget() *UploadTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Async task.
	Task *AsyncTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{42}
}

func (x *UploadResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UploadResponse) GetTask() *AsyncTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteRemoteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target.
	Target *RemoteFsEndpoint `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DeleteRemoteFileRequest) Reset() {
	*x = DeleteRemoteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteFileRequest) ProtoMessage() {}

func (x *DeleteRemoteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteRemoteFileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteRemoteFileRequest) GetTarget() *RemoteFsEndpoint {
	if x != nil {
		return x.Target
	}
	return nil
}

type DeleteRemoteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRemoteFileResponse) Reset() {
	*x = DeleteRemoteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRemoteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteFileResponse) ProtoMessage() {}

func (x *DeleteRemoteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteRemoteFileResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteRemoteFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total size of the volume / disk.
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Free size of the volume / disk.
	Free uint64 `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	// Used size of the volume / disk.
	Used uint64 `protobuf:"varint,3,opt,name=Used,proto3" json:"Used,omitempty"`
	// Total inodes available.
	Files uint64 `protobuf:"varint,4,opt,name=files,proto3" json:"files,omitempty"`
	// Free inodes available.
	FFree uint64 `protobuf:"varint,5,opt,name=f_free,json=fFree,proto3" json:"f_free,omitempty"`
	// File system type.
	FsType string `protobuf:"bytes,6,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{45}
}

func (x *DiskInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskInfo) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *DiskInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskInfo) GetFiles() uint64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *DiskInfo) GetFFree() uint64 {
	if x != nil {
		return x.FFree
	}
	return 0
}

func (x *DiskInfo) GetFsType() string {
	if x != nil {
		return x.FsType
	}
	return ""
}

type ShowDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Target path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ShowDiskInfoRequest) Reset() {
	*x = ShowDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDiskInfoRequest) ProtoMessage() {}

func (x *ShowDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*ShowDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{46}
}

func (x *ShowDiskInfoRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ShowDiskInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ShowDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Disk info.
	Info *DiskInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ShowDiskInfoResponse) Reset() {
	*x = ShowDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDiskInfoResponse) ProtoMessage() {}

func (x *ShowDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*ShowDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{47}
}

func (x *ShowDiskInfoResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShowDiskInfoResponse) GetInfo() *DiskInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type BlkioCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control key.
	Key BlkioKey `protobuf:"varint,1,opt,name=key,proto3,enum=proto.BlkioKey" json:"key,omitempty"`
	// Control value.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Target device.
	//
	// Types that are assignable to Device:
	//	*BlkioCtrl_Path
	//	*BlkioCtrl_DeviceName
	//	*BlkioCtrl_MajorMinor
	Device isBlkioCtrl_Device `protobuf_oneof:"device"`
}

func (x *BlkioCtrl) Reset() {
	*x = BlkioCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlkioCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlkioCtrl) ProtoMessage() {}

func (x *BlkioCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlkioCtrl.ProtoReflect.Descriptor instead.
func (*BlkioCtrl) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{48}
}

func (x *BlkioCtrl) GetKey() BlkioKey {
	if x != nil {
		return x.Key
	}
	return BlkioKey_IOPS_READ
}

func (x *BlkioCtrl) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (m *BlkioCtrl) GetDevice() isBlkioCtrl_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (x *BlkioCtrl) GetPath() string {
	if x, ok := x.GetDevice().(*BlkioCtrl_Path); ok {
		return x.Path
	}
	return ""
}

func (x *BlkioCtrl) GetDeviceName() string {
	if x, ok := x.GetDevice().(*BlkioCtrl_DeviceName); ok {
		return x.DeviceName
	}
	return ""
}

func (x *BlkioCtrl) GetMajorMinor() string {
	if x, ok := x.GetDevice().(*BlkioCtrl_MajorMinor); ok {
		return x.MajorMinor
	}
	return ""
}

type isBlkioCtrl_Device interface {
	isBlkioCtrl_Device()
}

type BlkioCtrl_Path struct {
	// Mounted path of the device (sub-path supported)
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

type BlkioCtrl_DeviceName struct {
	// Device name.
	DeviceName string `protobuf:"bytes,4,opt,name=device_name,json=deviceName,proto3,oneof"`
}

type BlkioCtrl_MajorMinor struct {
	// Device's "major-minor" number of Linux.
	MajorMinor string `protobuf:"bytes,5,opt,name=major_minor,json=majorMinor,proto3,oneof"`
}

func (*BlkioCtrl_Path) isBlkioCtrl_Device() {}

func (*BlkioCtrl_DeviceName) isBlkioCtrl_Device() {}

func (*BlkioCtrl_MajorMinor) isBlkioCtrl_Device() {}

type ControlCgroupsBlkioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host.
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Pod UID, use
	PodUid string `protobuf:"bytes,2,opt,name=pod_uid,json=podUid,proto3" json:"pod_uid,omitempty"`
	// Blkio controls.
	Controls []*BlkioCtrl `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty"`
}

func (x *ControlCgroupsBlkioRequest) Reset() {
	*x = ControlCgroupsBlkioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCgroupsBlkioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCgroupsBlkioRequest) ProtoMessage() {}

func (x *ControlCgroupsBlkioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCgroupsBlkioRequest.ProtoReflect.Descriptor instead.
func (*ControlCgroupsBlkioRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{49}
}

func (x *ControlCgroupsBlkioRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ControlCgroupsBlkioRequest) GetPodUid() string {
	if x != nil {
		return x.PodUid
	}
	return ""
}

func (x *ControlCgroupsBlkioRequest) GetControls() []*BlkioCtrl {
	if x != nil {
		return x.Controls
	}
	return nil
}

type ControlCgroupsBlkioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ControlCgroupsBlkioResponse) Reset() {
	*x = ControlCgroupsBlkioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCgroupsBlkioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCgroupsBlkioResponse) ProtoMessage() {}

func (x *ControlCgroupsBlkioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCgroupsBlkioResponse.ProtoReflect.Descriptor instead.
func (*ControlCgroupsBlkioResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{50}
}

func (x *ControlCgroupsBlkioResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type OpenBackupBinlogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//the log directory of the pod on the host
	LogDir string `protobuf:"bytes,2,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	//the info file content
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *OpenBackupBinlogRequest) Reset() {
	*x = OpenBackupBinlogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBackupBinlogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBackupBinlogRequest) ProtoMessage() {}

func (x *OpenBackupBinlogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBackupBinlogRequest.ProtoReflect.Descriptor instead.
func (*OpenBackupBinlogRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{51}
}

func (x *OpenBackupBinlogRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *OpenBackupBinlogRequest) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

func (x *OpenBackupBinlogRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type OpenBackupBinlogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OpenBackupBinlogResponse) Reset() {
	*x = OpenBackupBinlogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBackupBinlogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBackupBinlogResponse) ProtoMessage() {}

func (x *OpenBackupBinlogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBackupBinlogResponse.ProtoReflect.Descriptor instead.
func (*OpenBackupBinlogResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{52}
}

func (x *OpenBackupBinlogResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CloseBackupBinlogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//the log directory of the pod on the host
	LogDir string `protobuf:"bytes,2,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
}

func (x *CloseBackupBinlogRequest) Reset() {
	*x = CloseBackupBinlogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBackupBinlogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBackupBinlogRequest) ProtoMessage() {}

func (x *CloseBackupBinlogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBackupBinlogRequest.ProtoReflect.Descriptor instead.
func (*CloseBackupBinlogRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{53}
}

func (x *CloseBackupBinlogRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CloseBackupBinlogRequest) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

type CloseBackupBinlogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CloseBackupBinlogResponse) Reset() {
	*x = CloseBackupBinlogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBackupBinlogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBackupBinlogResponse) ProtoMessage() {}

func (x *CloseBackupBinlogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBackupBinlogResponse.ProtoReflect.Descriptor instead.
func (*CloseBackupBinlogResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{54}
}

func (x *CloseBackupBinlogResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UploadLatestBinlogFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//the log directory of the pod on the host
	LogDir string `protobuf:"bytes,2,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
}

func (x *UploadLatestBinlogFileRequest) Reset() {
	*x = UploadLatestBinlogFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLatestBinlogFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLatestBinlogFileRequest) ProtoMessage() {}

func (x *UploadLatestBinlogFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLatestBinlogFileRequest.ProtoReflect.Descriptor instead.
func (*UploadLatestBinlogFileRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{55}
}

func (x *UploadLatestBinlogFileRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *UploadLatestBinlogFileRequest) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

type UploadLatestBinlogFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// check if the latest binlog file is uploaded
	Done bool `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *UploadLatestBinlogFileResponse) Reset() {
	*x = UploadLatestBinlogFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLatestBinlogFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLatestBinlogFileResponse) ProtoMessage() {}

func (x *UploadLatestBinlogFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLatestBinlogFileResponse.ProtoReflect.Descriptor instead.
func (*UploadLatestBinlogFileResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{56}
}

func (x *UploadLatestBinlogFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UploadLatestBinlogFileResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type GetWatcherInfoHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//log dir. also worker dir of the watcher
	LogDir string `protobuf:"bytes,2,opt,name=logDir,proto3" json:"logDir,omitempty"`
}

func (x *GetWatcherInfoHashRequest) Reset() {
	*x = GetWatcherInfoHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatcherInfoHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatcherInfoHashRequest) ProtoMessage() {}

func (x *GetWatcherInfoHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatcherInfoHashRequest.ProtoReflect.Descriptor instead.
func (*GetWatcherInfoHashRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{57}
}

func (x *GetWatcherInfoHashRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *GetWatcherInfoHashRequest) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

type GetWatcherInfoHashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Hash value of info file
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetWatcherInfoHashResponse) Reset() {
	*x = GetWatcherInfoHashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatcherInfoHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatcherInfoHashResponse) ProtoMessage() {}

func (x *GetWatcherInfoHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatcherInfoHashResponse.ProtoReflect.Descriptor instead.
func (*GetWatcherInfoHashResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{58}
}

func (x *GetWatcherInfoHashResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetWatcherInfoHashResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type DeleteBinlogFilesBeforeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the k8s namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the instance name of PolarDB-X
	PxcName string `protobuf:"bytes,2,opt,name=pxcName,proto3" json:"pxcName,omitempty"`
	//the object uid of PolarDB-X
	PxcUid string `protobuf:"bytes,3,opt,name=pxcUid,proto3" json:"pxcUid,omitempty"`
	//the timestamp unit: seconds
	UnixTime int64 `protobuf:"varint,4,opt,name=unixTime,proto3" json:"unixTime,omitempty"`
	//the sink type
	SinkType string `protobuf:"bytes,5,opt,name=sinkType,proto3" json:"sinkType,omitempty"`
	//the sink name
	SinkName string `protobuf:"bytes,6,opt,name=sinkName,proto3" json:"sinkName,omitempty"`
}

func (x *DeleteBinlogFilesBeforeRequest) Reset() {
	*x = DeleteBinlogFilesBeforeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBinlogFilesBeforeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinlogFilesBeforeRequest) ProtoMessage() {}

func (x *DeleteBinlogFilesBeforeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinlogFilesBeforeRequest.ProtoReflect.Descriptor instead.
func (*DeleteBinlogFilesBeforeRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteBinlogFilesBeforeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteBinlogFilesBeforeRequest) GetPxcName() string {
	if x != nil {
		return x.PxcName
	}
	return ""
}

func (x *DeleteBinlogFilesBeforeRequest) GetPxcUid() string {
	if x != nil {
		return x.PxcUid
	}
	return ""
}

func (x *DeleteBinlogFilesBeforeRequest) GetUnixTime() int64 {
	if x != nil {
		return x.UnixTime
	}
	return 0
}

func (x *DeleteBinlogFilesBeforeRequest) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *DeleteBinlogFilesBeforeRequest) GetSinkName() string {
	if x != nil {
		return x.SinkName
	}
	return ""
}

type DeleteBinlogFilesBeforeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// delete file list
	DeletedFiles []string `protobuf:"bytes,2,rep,name=deletedFiles,proto3" json:"deletedFiles,omitempty"`
	// check if the latest binlog file is uploaded
	Done bool `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *DeleteBinlogFilesBeforeResponse) Reset() {
	*x = DeleteBinlogFilesBeforeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBinlogFilesBeforeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBinlogFilesBeforeResponse) ProtoMessage() {}

func (x *DeleteBinlogFilesBeforeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBinlogFilesBeforeResponse.ProtoReflect.Descriptor instead.
func (*DeleteBinlogFilesBeforeResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteBinlogFilesBeforeResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteBinlogFilesBeforeResponse) GetDeletedFiles() []string {
	if x != nil {
		return x.DeletedFiles
	}
	return nil
}

func (x *DeleteBinlogFilesBeforeResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type ListLocalBinlogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target host
	Host *Host `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	//log dir. also worker dir of the watcher
	LogDir string `protobuf:"bytes,2,opt,name=logDir,proto3" json:"logDir,omitempty"`
}

func (x *ListLocalBinlogListRequest) Reset() {
	*x = ListLocalBinlogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalBinlogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalBinlogListRequest) ProtoMessage() {}

func (x *ListLocalBinlogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalBinlogListRequest.ProtoReflect.Descriptor instead.
func (*ListLocalBinlogListRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{61}
}

func (x *ListLocalBinlogListRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ListLocalBinlogListRequest) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

type ListLocalBinlogListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	//backup binlog version
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// binlog file list
	BinlogFiles []string `protobuf:"bytes,3,rep,name=binlogFiles,proto3" json:"binlogFiles,omitempty"`
}

func (x *ListLocalBinlogListResponse) Reset() {
	*x = ListLocalBinlogListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLocalBinlogListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLocalBinlogListResponse) ProtoMessage() {}

func (x *ListLocalBinlogListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLocalBinlogListResponse.ProtoReflect.Descriptor instead.
func (*ListLocalBinlogListResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{62}
}

func (x *ListLocalBinlogListResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListLocalBinlogListResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListLocalBinlogListResponse) GetBinlogFiles() []string {
	if x != nil {
		return x.BinlogFiles
	}
	return nil
}

type ListRemoteBinlogListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the k8s namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the instance name of PolarDB-X
	PxcName string `protobuf:"bytes,2,opt,name=pxcName,proto3" json:"pxcName,omitempty"`
	//the object uid of PolarDB-X
	PxcUid string `protobuf:"bytes,3,opt,name=pxcUid,proto3" json:"pxcUid,omitempty"`
	// the instance name of xstore
	XStoreName string `protobuf:"bytes,4,opt,name=xStoreName,proto3" json:"xStoreName,omitempty"`
	//the object uid of xstore
	XStoreUid string `protobuf:"bytes,5,opt,name=xStoreUid,proto3" json:"xStoreUid,omitempty"`
	//the pod name
	PodName string `protobuf:"bytes,6,opt,name=podName,proto3" json:"podName,omitempty"`
	//the sink name
	SinkName string `protobuf:"bytes,7,opt,name=sinkName,proto3" json:"sinkName,omitempty"`
	//the sink type
	SinkType string `protobuf:"bytes,8,opt,name=sinkType,proto3" json:"sinkType,omitempty"`
}

func (x *ListRemoteBinlogListRequest) Reset() {
	*x = ListRemoteBinlogListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteBinlogListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteBinlogListRequest) ProtoMessage() {}

func (x *ListRemoteBinlogListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteBinlogListRequest.ProtoReflect.Descriptor instead.
func (*ListRemoteBinlogListRequest) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{63}
}

func (x *ListRemoteBinlogListRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetPxcName() string {
	if x != nil {
		return x.PxcName
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetPxcUid() string {
	if x != nil {
		return x.PxcUid
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetXStoreName() string {
	if x != nil {
		return x.XStoreName
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetXStoreUid() string {
	if x != nil {
		return x.XStoreUid
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetSinkName() string {
	if x != nil {
		return x.SinkName
	}
	return ""
}

func (x *ListRemoteBinlogListRequest) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

type ListRemoteBinlogListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	//the files
	Files []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListRemoteBinlogListResponse) Reset() {
	*x = ListRemoteBinlogListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hpfs_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteBinlogListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteBinlogListResponse) ProtoMessage() {}

func (x *ListRemoteBinlogListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hpfs_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteBinlogListResponse.ProtoReflect.Descriptor instead.
func (*ListRemoteBinlogListResponse) Descriptor() ([]byte, []int) {
	return file_hpfs_proto_rawDescGZIP(), []int{64}
}

func (x *ListRemoteBinlogListResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListRemoteBinlogListResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_hpfs_proto protoreflect.FileDescriptor

var file_hpfs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x70, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72,
	0x22, 0xa4, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x67, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x65, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xbf,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06,
	0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x6d, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x7e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x22, 0x43, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x5e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x22, 0x4b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x40, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x3b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x13,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x14, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x37, 0x0a, 0x09,
	0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x26, 0x0a, 0x09, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x10, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x51, 0x0a,
	0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x95, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x09, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x5f, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x5f, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x22, 0x4b, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a,
	0x15, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x63, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x0c, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0xa9, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2b,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x0e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x4a, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x41, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x42,
	0x6c, 0x6b, 0x69, 0x6f, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6b, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x55, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f,
	0x43, 0x74, 0x72, 0x6c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0x44,
	0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x6d, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x22, 0x42, 0x0a, 0x19,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x59, 0x0a, 0x1d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x22, 0x5b, 0x0a, 0x1e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x54, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x22, 0x57,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x78, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x78, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x78, 0x63, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x78, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x22, 0x55, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x78, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x78, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x78, 0x63, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x78, 0x63, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x78,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x78,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2a, 0x69, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x09, 0x2a, 0x46, 0x0a, 0x08, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4f, 0x50, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x42, 0x50, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x32, 0xa5, 0x0f, 0x0a, 0x0b,
	0x48, 0x70, 0x66, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13,
	0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42,
	0x6c, 0x6b, 0x69, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x6c, 0x6b, 0x69, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x6c,
	0x6b, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x64,
	0x62, 0x78, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x68, 0x70, 0x66, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_hpfs_proto_rawDescOnce sync.Once
	file_hpfs_proto_rawDescData = file_hpfs_proto_rawDesc
)

func file_hpfs_proto_rawDescGZIP() []byte {
	file_hpfs_proto_rawDescOnce.Do(func() {
		file_hpfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_hpfs_proto_rawDescData)
	})
	return file_hpfs_proto_rawDescData
}

var file_hpfs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_hpfs_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_hpfs_proto_goTypes = []interface{}{
	(TaskStatus)(0),                         // 0: proto.TaskStatus
	(BlkioKey)(0),                           // 1: proto.BlkioKey
	(Status_StatusCode)(0),                  // 2: proto.Status.StatusCode
	(*Host)(nil),                            // 3: proto.Host
	(*FileInfo)(nil),                        // 4: proto.FileInfo
	(*FileStats)(nil),                       // 5: proto.FileStats
	(*File)(nil),                            // 6: proto.File
	(*Status)(nil),                          // 7: proto.Status
	(*FileRequest)(nil),                     // 8: proto.FileRequest
	(*CreateFileOptions)(nil),               // 9: proto.CreateFileOptions
	(*CreateFileRequest)(nil),               // 10: proto.CreateFileRequest
	(*CreateFileResponse)(nil),              // 11: proto.CreateFileResponse
	(*CreateDirectoryOptions)(nil),          // 12: proto.CreateDirectoryOptions
	(*CreateDirectoryRequest)(nil),          // 13: proto.CreateDirectoryRequest
	(*CreateDirectoryResponse)(nil),         // 14: proto.CreateDirectoryResponse
	(*CreateSymbolicLinkOptions)(nil),       // 15: proto.CreateSymbolicLinkOptions
	(*CreateSymbolicLinkRequest)(nil),       // 16: proto.CreateSymbolicLinkRequest
	(*CreateSymbolicLinkResponse)(nil),      // 17: proto.CreateSymbolicLinkResponse
	(*RemoveOptions)(nil),                   // 18: proto.RemoveOptions
	(*ListDirectoryRequest)(nil),            // 19: proto.ListDirectoryRequest
	(*ListDirectoryResponse)(nil),           // 20: proto.ListDirectoryResponse
	(*RemoveDirectoryRequest)(nil),          // 21: proto.RemoveDirectoryRequest
	(*RemoveDirectoryResponse)(nil),         // 22: proto.RemoveDirectoryResponse
	(*RemoveFileRequest)(nil),               // 23: proto.RemoveFileRequest
	(*RemoveFileResponse)(nil),              // 24: proto.RemoveFileResponse
	(*TruncateFileOptions)(nil),             // 25: proto.TruncateFileOptions
	(*TruncateFileRequest)(nil),             // 26: proto.TruncateFileRequest
	(*TruncateFileResponse)(nil),            // 27: proto.TruncateFileResponse
	(*RemoteFsEndpoint)(nil),                // 28: proto.RemoteFsEndpoint
	(*AsyncTask)(nil),                       // 29: proto.AsyncTask
	(*AsyncTaskRequest)(nil),                // 30: proto.AsyncTaskRequest
	(*DownloadSource)(nil),                  // 31: proto.DownloadSource
	(*DownloadTask)(nil),                    // 32: proto.DownloadTask
	(*DownloadRequest)(nil),                 // 33: proto.DownloadRequest
	(*DownloadResponse)(nil),                // 34: proto.DownloadResponse
	(*TransferRequest)(nil),                 // 35: proto.TransferRequest
	(*TransferResponse)(nil),                // 36: proto.TransferResponse
	(*ShowDiskUsageRequest)(nil),            // 37: proto.ShowDiskUsageRequest
	(*ShowDiskUsageResponse)(nil),           // 38: proto.ShowDiskUsageResponse
	(*ShowAsyncTaskStatusRequest)(nil),      // 39: proto.ShowAsyncTaskStatusRequest
	(*ShowAsyncTaskStatusResponse)(nil),     // 40: proto.ShowAsyncTaskStatusResponse
	(*CancelAsyncTaskRequest)(nil),          // 41: proto.CancelAsyncTaskRequest
	(*CancelAsyncTaskResponse)(nil),         // 42: proto.CancelAsyncTaskResponse
	(*UploadTarget)(nil),                    // 43: proto.UploadTarget
	(*UploadRequest)(nil),                   // 44: proto.UploadRequest
	(*UploadResponse)(nil),                  // 45: proto.UploadResponse
	(*DeleteRemoteFileRequest)(nil),         // 46: proto.DeleteRemoteFileRequest
	(*DeleteRemoteFileResponse)(nil),        // 47: proto.DeleteRemoteFileResponse
	(*DiskInfo)(nil),                        // 48: proto.DiskInfo
	(*ShowDiskInfoRequest)(nil),             // 49: proto.ShowDiskInfoRequest
	(*ShowDiskInfoResponse)(nil),            // 50: proto.ShowDiskInfoResponse
	(*BlkioCtrl)(nil),                       // 51: proto.BlkioCtrl
	(*ControlCgroupsBlkioRequest)(nil),      // 52: proto.ControlCgroupsBlkioRequest
	(*ControlCgroupsBlkioResponse)(nil),     // 53: proto.ControlCgroupsBlkioResponse
	(*OpenBackupBinlogRequest)(nil),         // 54: proto.OpenBackupBinlogRequest
	(*OpenBackupBinlogResponse)(nil),        // 55: proto.OpenBackupBinlogResponse
	(*CloseBackupBinlogRequest)(nil),        // 56: proto.CloseBackupBinlogRequest
	(*CloseBackupBinlogResponse)(nil),       // 57: proto.CloseBackupBinlogResponse
	(*UploadLatestBinlogFileRequest)(nil),   // 58: proto.UploadLatestBinlogFileRequest
	(*UploadLatestBinlogFileResponse)(nil),  // 59: proto.UploadLatestBinlogFileResponse
	(*GetWatcherInfoHashRequest)(nil),       // 60: proto.GetWatcherInfoHashRequest
	(*GetWatcherInfoHashResponse)(nil),      // 61: proto.GetWatcherInfoHashResponse
	(*DeleteBinlogFilesBeforeRequest)(nil),  // 62: proto.DeleteBinlogFilesBeforeRequest
	(*DeleteBinlogFilesBeforeResponse)(nil), // 63: proto.DeleteBinlogFilesBeforeResponse
	(*ListLocalBinlogListRequest)(nil),      // 64: proto.ListLocalBinlogListRequest
	(*ListLocalBinlogListResponse)(nil),     // 65: proto.ListLocalBinlogListResponse
	(*ListRemoteBinlogListRequest)(nil),     // 66: proto.ListRemoteBinlogListRequest
	(*ListRemoteBinlogListResponse)(nil),    // 67: proto.ListRemoteBinlogListResponse
	nil,                                     // 68: proto.RemoteFsEndpoint.AuthEntry
	nil,                                     // 69: proto.RemoteFsEndpoint.OtherEntry
	(*timestamp.Timestamp)(nil),             // 70: google.protobuf.Timestamp
}
var file_hpfs_proto_depIdxs = []int32{
	70,  // 0: proto.FileInfo.mod_time:type_name -> google.protobuf.Timestamp
	5,   // 1: proto.File.stats:type_name -> proto.FileStats
	2,   // 2: proto.Status.code:type_name -> proto.Status.StatusCode
	3,   // 3: proto.CreateFileRequest.host:type_name -> proto.Host
	9,   // 4: proto.CreateFileRequest.options:type_name -> proto.CreateFileOptions
	8,   // 5: proto.CreateFileRequest.file:type_name -> proto.FileRequest
	7,   // 6: proto.CreateFileResponse.status:type_name -> proto.Status
	3,   // 7: proto.CreateDirectoryRequest.host:type_name -> proto.Host
	12,  // 8: proto.CreateDirectoryRequest.options:type_name -> proto.CreateDirectoryOptions
	8,   // 9: proto.CreateDirectoryRequest.directory:type_name -> proto.FileRequest
	7,   // 10: proto.CreateDirectoryResponse.status:type_name -> proto.Status
	3,   // 11: proto.CreateSymbolicLinkRequest.host:type_name -> proto.Host
	15,  // 12: proto.CreateSymbolicLinkRequest.options:type_name -> proto.CreateSymbolicLinkOptions
	8,   // 13: proto.CreateSymbolicLinkRequest.link_path:type_name -> proto.FileRequest
	7,   // 14: proto.CreateSymbolicLinkResponse.status:type_name -> proto.Status
	3,   // 15: proto.ListDirectoryRequest.host:type_name -> proto.Host
	7,   // 16: proto.ListDirectoryResponse.status:type_name -> proto.Status
	4,   // 17: proto.ListDirectoryResponse.files:type_name -> proto.FileInfo
	3,   // 18: proto.RemoveDirectoryRequest.host:type_name -> proto.Host
	18,  // 19: proto.RemoveDirectoryRequest.options:type_name -> proto.RemoveOptions
	7,   // 20: proto.RemoveDirectoryResponse.status:type_name -> proto.Status
	3,   // 21: proto.RemoveFileRequest.host:type_name -> proto.Host
	18,  // 22: proto.RemoveFileRequest.options:type_name -> proto.RemoveOptions
	7,   // 23: proto.RemoveFileResponse.status:type_name -> proto.Status
	3,   // 24: proto.TruncateFileRequest.host:type_name -> proto.Host
	25,  // 25: proto.TruncateFileRequest.options:type_name -> proto.TruncateFileOptions
	7,   // 26: proto.TruncateFileResponse.status:type_name -> proto.Status
	68,  // 27: proto.RemoteFsEndpoint.auth:type_name -> proto.RemoteFsEndpoint.AuthEntry
	69,  // 28: proto.RemoteFsEndpoint.other:type_name -> proto.RemoteFsEndpoint.OtherEntry
	28,  // 29: proto.DownloadSource.endpoint:type_name -> proto.RemoteFsEndpoint
	31,  // 30: proto.DownloadTask.source:type_name -> proto.DownloadSource
	3,   // 31: proto.DownloadRequest.host:type_name -> proto.Host
	30,  // 32: proto.DownloadRequest.async_task:type_name -> proto.AsyncTaskRequest
	32,  // 33: proto.DownloadRequest.tasks:type_name -> proto.DownloadTask
	7,   // 34: proto.DownloadResponse.status:type_name -> proto.Status
	29,  // 35: proto.DownloadResponse.task:type_name -> proto.AsyncTask
	3,   // 36: proto.TransferRequest.src_host:type_name -> proto.Host
	3,   // 37: proto.TransferRequest.dest_host:type_name -> proto.Host
	30,  // 38: proto.TransferRequest.async_task:type_name -> proto.AsyncTaskRequest
	7,   // 39: proto.TransferResponse.status:type_name -> proto.Status
	29,  // 40: proto.TransferResponse.task:type_name -> proto.AsyncTask
	3,   // 41: proto.ShowDiskUsageRequest.host:type_name -> proto.Host
	7,   // 42: proto.ShowDiskUsageResponse.status:type_name -> proto.Status
	3,   // 43: proto.ShowAsyncTaskStatusRequest.host:type_name -> proto.Host
	29,  // 44: proto.ShowAsyncTaskStatusRequest.task:type_name -> proto.AsyncTask
	7,   // 45: proto.ShowAsyncTaskStatusResponse.status:type_name -> proto.Status
	0,   // 46: proto.ShowAsyncTaskStatusResponse.task_status:type_name -> proto.TaskStatus
	3,   // 47: proto.CancelAsyncTaskRequest.host:type_name -> proto.Host
	29,  // 48: proto.CancelAsyncTaskRequest.task:type_name -> proto.AsyncTask
	7,   // 49: proto.CancelAsyncTaskResponse.status:type_name -> proto.Status
	28,  // 50: proto.UploadTarget.endpoint:type_name -> proto.RemoteFsEndpoint
	3,   // 51: proto.UploadRequest.host:type_name -> proto.Host
	30,  // 52: proto.UploadRequest.async_task:type_name -> proto.AsyncTaskRequest
	43,  // 53: proto.UploadRequest.target:type_name -> proto.UploadTarget
	7,   // 54: proto.UploadResponse.status:type_name -> proto.Status
	29,  // 55: proto.UploadResponse.task:type_name -> proto.AsyncTask
	28,  // 56: proto.DeleteRemoteFileRequest.target:type_name -> proto.RemoteFsEndpoint
	7,   // 57: proto.DeleteRemoteFileResponse.status:type_name -> proto.Status
	3,   // 58: proto.ShowDiskInfoRequest.host:type_name -> proto.Host
	7,   // 59: proto.ShowDiskInfoResponse.status:type_name -> proto.Status
	48,  // 60: proto.ShowDiskInfoResponse.info:type_name -> proto.DiskInfo
	1,   // 61: proto.BlkioCtrl.key:type_name -> proto.BlkioKey
	3,   // 62: proto.ControlCgroupsBlkioRequest.host:type_name -> proto.Host
	51,  // 63: proto.ControlCgroupsBlkioRequest.controls:type_name -> proto.BlkioCtrl
	7,   // 64: proto.ControlCgroupsBlkioResponse.status:type_name -> proto.Status
	3,   // 65: proto.OpenBackupBinlogRequest.host:type_name -> proto.Host
	7,   // 66: proto.OpenBackupBinlogResponse.status:type_name -> proto.Status
	3,   // 67: proto.CloseBackupBinlogRequest.host:type_name -> proto.Host
	7,   // 68: proto.CloseBackupBinlogResponse.status:type_name -> proto.Status
	3,   // 69: proto.UploadLatestBinlogFileRequest.host:type_name -> proto.Host
	7,   // 70: proto.UploadLatestBinlogFileResponse.status:type_name -> proto.Status
	3,   // 71: proto.GetWatcherInfoHashRequest.host:type_name -> proto.Host
	7,   // 72: proto.GetWatcherInfoHashResponse.status:type_name -> proto.Status
	7,   // 73: proto.DeleteBinlogFilesBeforeResponse.status:type_name -> proto.Status
	3,   // 74: proto.ListLocalBinlogListRequest.host:type_name -> proto.Host
	7,   // 75: proto.ListLocalBinlogListResponse.status:type_name -> proto.Status
	7,   // 76: proto.ListRemoteBinlogListResponse.status:type_name -> proto.Status
	13,  // 77: proto.HpfsService.CreateDirectory:input_type -> proto.CreateDirectoryRequest
	10,  // 78: proto.HpfsService.CreateFile:input_type -> proto.CreateFileRequest
	16,  // 79: proto.HpfsService.CreateSymbolicLink:input_type -> proto.CreateSymbolicLinkRequest
	19,  // 80: proto.HpfsService.ListDirectory:input_type -> proto.ListDirectoryRequest
	21,  // 81: proto.HpfsService.RemoveDirectory:input_type -> proto.RemoveDirectoryRequest
	23,  // 82: proto.HpfsService.RemoveFile:input_type -> proto.RemoveFileRequest
	26,  // 83: proto.HpfsService.TruncateFile:input_type -> proto.TruncateFileRequest
	33,  // 84: proto.HpfsService.DownloadFiles:input_type -> proto.DownloadRequest
	44,  // 85: proto.HpfsService.UploadFiles:input_type -> proto.UploadRequest
	46,  // 86: proto.HpfsService.DeleteRemoteFile:input_type -> proto.DeleteRemoteFileRequest
	39,  // 87: proto.HpfsService.ShowAsyncTaskStatus:input_type -> proto.ShowAsyncTaskStatusRequest
	41,  // 88: proto.HpfsService.CancelAsyncTask:input_type -> proto.CancelAsyncTaskRequest
	35,  // 89: proto.HpfsService.TransferFiles:input_type -> proto.TransferRequest
	37,  // 90: proto.HpfsService.ShowDiskUsage:input_type -> proto.ShowDiskUsageRequest
	49,  // 91: proto.HpfsService.ShowDiskInfo:input_type -> proto.ShowDiskInfoRequest
	52,  // 92: proto.HpfsService.ControlCgroupsBlkio:input_type -> proto.ControlCgroupsBlkioRequest
	54,  // 93: proto.HpfsService.OpenBackupBinlog:input_type -> proto.OpenBackupBinlogRequest
	56,  // 94: proto.HpfsService.CloseBackupBinlog:input_type -> proto.CloseBackupBinlogRequest
	58,  // 95: proto.HpfsService.UploadLatestBinlogFile:input_type -> proto.UploadLatestBinlogFileRequest
	60,  // 96: proto.HpfsService.GetWatcherInfoHash:input_type -> proto.GetWatcherInfoHashRequest
	62,  // 97: proto.HpfsService.DeleteBinlogFilesBefore:input_type -> proto.DeleteBinlogFilesBeforeRequest
	64,  // 98: proto.HpfsService.ListLocalBinlogList:input_type -> proto.ListLocalBinlogListRequest
	66,  // 99: proto.HpfsService.ListRemoteBinlogList:input_type -> proto.ListRemoteBinlogListRequest
	14,  // 100: proto.HpfsService.CreateDirectory:output_type -> proto.CreateDirectoryResponse
	11,  // 101: proto.HpfsService.CreateFile:output_type -> proto.CreateFileResponse
	17,  // 102: proto.HpfsService.CreateSymbolicLink:output_type -> proto.CreateSymbolicLinkResponse
	20,  // 103: proto.HpfsService.ListDirectory:output_type -> proto.ListDirectoryResponse
	22,  // 104: proto.HpfsService.RemoveDirectory:output_type -> proto.RemoveDirectoryResponse
	24,  // 105: proto.HpfsService.RemoveFile:output_type -> proto.RemoveFileResponse
	27,  // 106: proto.HpfsService.TruncateFile:output_type -> proto.TruncateFileResponse
	34,  // 107: proto.HpfsService.DownloadFiles:output_type -> proto.DownloadResponse
	45,  // 108: proto.HpfsService.UploadFiles:output_type -> proto.UploadResponse
	47,  // 109: proto.HpfsService.DeleteRemoteFile:output_type -> proto.DeleteRemoteFileResponse
	40,  // 110: proto.HpfsService.ShowAsyncTaskStatus:output_type -> proto.ShowAsyncTaskStatusResponse
	42,  // 111: proto.HpfsService.CancelAsyncTask:output_type -> proto.CancelAsyncTaskResponse
	36,  // 112: proto.HpfsService.TransferFiles:output_type -> proto.TransferResponse
	38,  // 113: proto.HpfsService.ShowDiskUsage:output_type -> proto.ShowDiskUsageResponse
	50,  // 114: proto.HpfsService.ShowDiskInfo:output_type -> proto.ShowDiskInfoResponse
	53,  // 115: proto.HpfsService.ControlCgroupsBlkio:output_type -> proto.ControlCgroupsBlkioResponse
	55,  // 116: proto.HpfsService.OpenBackupBinlog:output_type -> proto.OpenBackupBinlogResponse
	57,  // 117: proto.HpfsService.CloseBackupBinlog:output_type -> proto.CloseBackupBinlogResponse
	59,  // 118: proto.HpfsService.UploadLatestBinlogFile:output_type -> proto.UploadLatestBinlogFileResponse
	61,  // 119: proto.HpfsService.GetWatcherInfoHash:output_type -> proto.GetWatcherInfoHashResponse
	63,  // 120: proto.HpfsService.DeleteBinlogFilesBefore:output_type -> proto.DeleteBinlogFilesBeforeResponse
	65,  // 121: proto.HpfsService.ListLocalBinlogList:output_type -> proto.ListLocalBinlogListResponse
	67,  // 122: proto.HpfsService.ListRemoteBinlogList:output_type -> proto.ListRemoteBinlogListResponse
	100, // [100:123] is the sub-list for method output_type
	77,  // [77:100] is the sub-list for method input_type
	77,  // [77:77] is the sub-list for extension type_name
	77,  // [77:77] is the sub-list for extension extendee
	0,   // [0:77] is the sub-list for field type_name
}

func init() { file_hpfs_proto_init() }
func file_hpfs_proto_init() {
	if File_hpfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hpfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSymbolicLinkOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSymbolicLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSymbolicLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteFsEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDiskUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDiskUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAsyncTaskStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAsyncTaskStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAsyncTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAsyncTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRemoteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlkioCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCgroupsBlkioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCgroupsBlkioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBackupBinlogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBackupBinlogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseBackupBinlogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseBackupBinlogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLatestBinlogFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLatestBinlogFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatcherInfoHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatcherInfoHashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBinlogFilesBeforeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBinlogFilesBeforeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalBinlogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLocalBinlogListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteBinlogListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hpfs_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteBinlogListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hpfs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FileStats_Uid)(nil),
		(*FileStats_User)(nil),
		(*FileStats_Gid)(nil),
		(*FileStats_GroupName)(nil),
	}
	file_hpfs_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FileRequest_Uid)(nil),
		(*FileRequest_User)(nil),
		(*FileRequest_Gid)(nil),
		(*FileRequest_GroupName)(nil),
	}
	file_hpfs_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*BlkioCtrl_Path)(nil),
		(*BlkioCtrl_DeviceName)(nil),
		(*BlkioCtrl_MajorMinor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hpfs_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hpfs_proto_goTypes,
		DependencyIndexes: file_hpfs_proto_depIdxs,
		EnumInfos:         file_hpfs_proto_enumTypes,
		MessageInfos:      file_hpfs_proto_msgTypes,
	}.Build()
	File_hpfs_proto = out.File
	file_hpfs_proto_rawDesc = nil
	file_hpfs_proto_goTypes = nil
	file_hpfs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HpfsServiceClient is the client API for HpfsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HpfsServiceClient interface {
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	CreateSymbolicLink(ctx context.Context, in *CreateSymbolicLinkRequest, opts ...grpc.CallOption) (*CreateSymbolicLinkResponse, error)
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error)
	RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error)
	TruncateFile(ctx context.Context, in *TruncateFileRequest, opts ...grpc.CallOption) (*TruncateFileResponse, error)
	DownloadFiles(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	UploadFiles(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	DeleteRemoteFile(ctx context.Context, in *DeleteRemoteFileRequest, opts ...grpc.CallOption) (*DeleteRemoteFileResponse, error)
	ShowAsyncTaskStatus(ctx context.Context, in *ShowAsyncTaskStatusRequest, opts ...grpc.CallOption) (*ShowAsyncTaskStatusResponse, error)
	CancelAsyncTask(ctx context.Context, in *CancelAsyncTaskRequest, opts ...grpc.CallOption) (*CancelAsyncTaskResponse, error)
	TransferFiles(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	ShowDiskUsage(ctx context.Context, in *ShowDiskUsageRequest, opts ...grpc.CallOption) (*ShowDiskUsageResponse, error)
	ShowDiskInfo(ctx context.Context, in *ShowDiskInfoRequest, opts ...grpc.CallOption) (*ShowDiskInfoResponse, error)
	// Control blkio cgroups for kubernetes pods.
	ControlCgroupsBlkio(ctx context.Context, in *ControlCgroupsBlkioRequest, opts ...grpc.CallOption) (*ControlCgroupsBlkioResponse, error)
	//backup binlog
	OpenBackupBinlog(ctx context.Context, in *OpenBackupBinlogRequest, opts ...grpc.CallOption) (*OpenBackupBinlogResponse, error)
	CloseBackupBinlog(ctx context.Context, in *CloseBackupBinlogRequest, opts ...grpc.CallOption) (*CloseBackupBinlogResponse, error)
	UploadLatestBinlogFile(ctx context.Context, in *UploadLatestBinlogFileRequest, opts ...grpc.CallOption) (*UploadLatestBinlogFileResponse, error)
	GetWatcherInfoHash(ctx context.Context, in *GetWatcherInfoHashRequest, opts ...grpc.CallOption) (*GetWatcherInfoHashResponse, error)
	DeleteBinlogFilesBefore(ctx context.Context, in *DeleteBinlogFilesBeforeRequest, opts ...grpc.CallOption) (*DeleteBinlogFilesBeforeResponse, error)
	ListLocalBinlogList(ctx context.Context, in *ListLocalBinlogListRequest, opts ...grpc.CallOption) (*ListLocalBinlogListResponse, error)
	ListRemoteBinlogList(ctx context.Context, in *ListRemoteBinlogListRequest, opts ...grpc.CallOption) (*ListRemoteBinlogListResponse, error)
}

type hpfsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHpfsServiceClient(cc grpc.ClientConnInterface) HpfsServiceClient {
	return &hpfsServiceClient{cc}
}

func (c *hpfsServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	out := new(CreateDirectoryResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/CreateDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) CreateSymbolicLink(ctx context.Context, in *CreateSymbolicLinkRequest, opts ...grpc.CallOption) (*CreateSymbolicLinkResponse, error) {
	out := new(CreateSymbolicLinkResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/CreateSymbolicLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error) {
	out := new(RemoveDirectoryResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/RemoveDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error) {
	out := new(RemoveFileResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) TruncateFile(ctx context.Context, in *TruncateFileRequest, opts ...grpc.CallOption) (*TruncateFileResponse, error) {
	out := new(TruncateFileResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/TruncateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) DownloadFiles(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/DownloadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) UploadFiles(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) DeleteRemoteFile(ctx context.Context, in *DeleteRemoteFileRequest, opts ...grpc.CallOption) (*DeleteRemoteFileResponse, error) {
	out := new(DeleteRemoteFileResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/DeleteRemoteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ShowAsyncTaskStatus(ctx context.Context, in *ShowAsyncTaskStatusRequest, opts ...grpc.CallOption) (*ShowAsyncTaskStatusResponse, error) {
	out := new(ShowAsyncTaskStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ShowAsyncTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) CancelAsyncTask(ctx context.Context, in *CancelAsyncTaskRequest, opts ...grpc.CallOption) (*CancelAsyncTaskResponse, error) {
	out := new(CancelAsyncTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/CancelAsyncTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) TransferFiles(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/TransferFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ShowDiskUsage(ctx context.Context, in *ShowDiskUsageRequest, opts ...grpc.CallOption) (*ShowDiskUsageResponse, error) {
	out := new(ShowDiskUsageResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ShowDiskUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ShowDiskInfo(ctx context.Context, in *ShowDiskInfoRequest, opts ...grpc.CallOption) (*ShowDiskInfoResponse, error) {
	out := new(ShowDiskInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ShowDiskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ControlCgroupsBlkio(ctx context.Context, in *ControlCgroupsBlkioRequest, opts ...grpc.CallOption) (*ControlCgroupsBlkioResponse, error) {
	out := new(ControlCgroupsBlkioResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ControlCgroupsBlkio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) OpenBackupBinlog(ctx context.Context, in *OpenBackupBinlogRequest, opts ...grpc.CallOption) (*OpenBackupBinlogResponse, error) {
	out := new(OpenBackupBinlogResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/OpenBackupBinlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) CloseBackupBinlog(ctx context.Context, in *CloseBackupBinlogRequest, opts ...grpc.CallOption) (*CloseBackupBinlogResponse, error) {
	out := new(CloseBackupBinlogResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/CloseBackupBinlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) UploadLatestBinlogFile(ctx context.Context, in *UploadLatestBinlogFileRequest, opts ...grpc.CallOption) (*UploadLatestBinlogFileResponse, error) {
	out := new(UploadLatestBinlogFileResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/UploadLatestBinlogFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) GetWatcherInfoHash(ctx context.Context, in *GetWatcherInfoHashRequest, opts ...grpc.CallOption) (*GetWatcherInfoHashResponse, error) {
	out := new(GetWatcherInfoHashResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/GetWatcherInfoHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) DeleteBinlogFilesBefore(ctx context.Context, in *DeleteBinlogFilesBeforeRequest, opts ...grpc.CallOption) (*DeleteBinlogFilesBeforeResponse, error) {
	out := new(DeleteBinlogFilesBeforeResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/DeleteBinlogFilesBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ListLocalBinlogList(ctx context.Context, in *ListLocalBinlogListRequest, opts ...grpc.CallOption) (*ListLocalBinlogListResponse, error) {
	out := new(ListLocalBinlogListResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ListLocalBinlogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hpfsServiceClient) ListRemoteBinlogList(ctx context.Context, in *ListRemoteBinlogListRequest, opts ...grpc.CallOption) (*ListRemoteBinlogListResponse, error) {
	out := new(ListRemoteBinlogListResponse)
	err := c.cc.Invoke(ctx, "/proto.HpfsService/ListRemoteBinlogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HpfsServiceServer is the server API for HpfsService service.
type HpfsServiceServer interface {
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error)
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	CreateSymbolicLink(context.Context, *CreateSymbolicLinkRequest) (*CreateSymbolicLinkResponse, error)
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error)
	RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error)
	TruncateFile(context.Context, *TruncateFileRequest) (*TruncateFileResponse, error)
	DownloadFiles(context.Context, *DownloadRequest) (*DownloadResponse, error)
	UploadFiles(context.Context, *UploadRequest) (*UploadResponse, error)
	DeleteRemoteFile(context.Context, *DeleteRemoteFileRequest) (*DeleteRemoteFileResponse, error)
	ShowAsyncTaskStatus(context.Context, *ShowAsyncTaskStatusRequest) (*ShowAsyncTaskStatusResponse, error)
	CancelAsyncTask(context.Context, *CancelAsyncTaskRequest) (*CancelAsyncTaskResponse, error)
	TransferFiles(context.Context, *TransferRequest) (*TransferResponse, error)
	ShowDiskUsage(context.Context, *ShowDiskUsageRequest) (*ShowDiskUsageResponse, error)
	ShowDiskInfo(context.Context, *ShowDiskInfoRequest) (*ShowDiskInfoResponse, error)
	// Control blkio cgroups for kubernetes pods.
	ControlCgroupsBlkio(context.Context, *ControlCgroupsBlkioRequest) (*ControlCgroupsBlkioResponse, error)
	//backup binlog
	OpenBackupBinlog(context.Context, *OpenBackupBinlogRequest) (*OpenBackupBinlogResponse, error)
	CloseBackupBinlog(context.Context, *CloseBackupBinlogRequest) (*CloseBackupBinlogResponse, error)
	UploadLatestBinlogFile(context.Context, *UploadLatestBinlogFileRequest) (*UploadLatestBinlogFileResponse, error)
	GetWatcherInfoHash(context.Context, *GetWatcherInfoHashRequest) (*GetWatcherInfoHashResponse, error)
	DeleteBinlogFilesBefore(context.Context, *DeleteBinlogFilesBeforeRequest) (*DeleteBinlogFilesBeforeResponse, error)
	ListLocalBinlogList(context.Context, *ListLocalBinlogListRequest) (*ListLocalBinlogListResponse, error)
	ListRemoteBinlogList(context.Context, *ListRemoteBinlogListRequest) (*ListRemoteBinlogListResponse, error)
}

// UnimplementedHpfsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHpfsServiceServer struct {
}

func (*UnimplementedHpfsServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (*UnimplementedHpfsServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (*UnimplementedHpfsServiceServer) CreateSymbolicLink(context.Context, *CreateSymbolicLinkRequest) (*CreateSymbolicLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymbolicLink not implemented")
}
func (*UnimplementedHpfsServiceServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (*UnimplementedHpfsServiceServer) RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectory not implemented")
}
func (*UnimplementedHpfsServiceServer) RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (*UnimplementedHpfsServiceServer) TruncateFile(context.Context, *TruncateFileRequest) (*TruncateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateFile not implemented")
}
func (*UnimplementedHpfsServiceServer) DownloadFiles(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFiles not implemented")
}
func (*UnimplementedHpfsServiceServer) UploadFiles(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (*UnimplementedHpfsServiceServer) DeleteRemoteFile(context.Context, *DeleteRemoteFileRequest) (*DeleteRemoteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemoteFile not implemented")
}
func (*UnimplementedHpfsServiceServer) ShowAsyncTaskStatus(context.Context, *ShowAsyncTaskStatusRequest) (*ShowAsyncTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAsyncTaskStatus not implemented")
}
func (*UnimplementedHpfsServiceServer) CancelAsyncTask(context.Context, *CancelAsyncTaskRequest) (*CancelAsyncTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAsyncTask not implemented")
}
func (*UnimplementedHpfsServiceServer) TransferFiles(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFiles not implemented")
}
func (*UnimplementedHpfsServiceServer) ShowDiskUsage(context.Context, *ShowDiskUsageRequest) (*ShowDiskUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDiskUsage not implemented")
}
func (*UnimplementedHpfsServiceServer) ShowDiskInfo(context.Context, *ShowDiskInfoRequest) (*ShowDiskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDiskInfo not implemented")
}
func (*UnimplementedHpfsServiceServer) ControlCgroupsBlkio(context.Context, *ControlCgroupsBlkioRequest) (*ControlCgroupsBlkioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlCgroupsBlkio not implemented")
}
func (*UnimplementedHpfsServiceServer) OpenBackupBinlog(context.Context, *OpenBackupBinlogRequest) (*OpenBackupBinlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBackupBinlog not implemented")
}
func (*UnimplementedHpfsServiceServer) CloseBackupBinlog(context.Context, *CloseBackupBinlogRequest) (*CloseBackupBinlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseBackupBinlog not implemented")
}
func (*UnimplementedHpfsServiceServer) UploadLatestBinlogFile(context.Context, *UploadLatestBinlogFileRequest) (*UploadLatestBinlogFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLatestBinlogFile not implemented")
}
func (*UnimplementedHpfsServiceServer) GetWatcherInfoHash(context.Context, *GetWatcherInfoHashRequest) (*GetWatcherInfoHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatcherInfoHash not implemented")
}
func (*UnimplementedHpfsServiceServer) DeleteBinlogFilesBefore(context.Context, *DeleteBinlogFilesBeforeRequest) (*DeleteBinlogFilesBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinlogFilesBefore not implemented")
}
func (*UnimplementedHpfsServiceServer) ListLocalBinlogList(context.Context, *ListLocalBinlogListRequest) (*ListLocalBinlogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalBinlogList not implemented")
}
func (*UnimplementedHpfsServiceServer) ListRemoteBinlogList(context.Context, *ListRemoteBinlogListRequest) (*ListRemoteBinlogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemoteBinlogList not implemented")
}

func RegisterHpfsServiceServer(s *grpc.Server, srv HpfsServiceServer) {
	s.RegisterService(&_HpfsService_serviceDesc, srv)
}

func _HpfsService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_CreateSymbolicLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSymbolicLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).CreateSymbolicLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/CreateSymbolicLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).CreateSymbolicLink(ctx, req.(*CreateSymbolicLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_RemoveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).RemoveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/RemoveDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).RemoveDirectory(ctx, req.(*RemoveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).RemoveFile(ctx, req.(*RemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_TruncateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).TruncateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/TruncateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).TruncateFile(ctx, req.(*TruncateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_DownloadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).DownloadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/DownloadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).DownloadFiles(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).UploadFiles(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_DeleteRemoteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).DeleteRemoteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/DeleteRemoteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).DeleteRemoteFile(ctx, req.(*DeleteRemoteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ShowAsyncTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAsyncTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ShowAsyncTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ShowAsyncTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ShowAsyncTaskStatus(ctx, req.(*ShowAsyncTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_CancelAsyncTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAsyncTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).CancelAsyncTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/CancelAsyncTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).CancelAsyncTask(ctx, req.(*CancelAsyncTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_TransferFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).TransferFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/TransferFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).TransferFiles(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ShowDiskUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDiskUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ShowDiskUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ShowDiskUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ShowDiskUsage(ctx, req.(*ShowDiskUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ShowDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDiskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ShowDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ShowDiskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ShowDiskInfo(ctx, req.(*ShowDiskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ControlCgroupsBlkio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlCgroupsBlkioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ControlCgroupsBlkio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ControlCgroupsBlkio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ControlCgroupsBlkio(ctx, req.(*ControlCgroupsBlkioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_OpenBackupBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenBackupBinlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).OpenBackupBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/OpenBackupBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).OpenBackupBinlog(ctx, req.(*OpenBackupBinlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_CloseBackupBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseBackupBinlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).CloseBackupBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/CloseBackupBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).CloseBackupBinlog(ctx, req.(*CloseBackupBinlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_UploadLatestBinlogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLatestBinlogFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).UploadLatestBinlogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/UploadLatestBinlogFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).UploadLatestBinlogFile(ctx, req.(*UploadLatestBinlogFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_GetWatcherInfoHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatcherInfoHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).GetWatcherInfoHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/GetWatcherInfoHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).GetWatcherInfoHash(ctx, req.(*GetWatcherInfoHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_DeleteBinlogFilesBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinlogFilesBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).DeleteBinlogFilesBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/DeleteBinlogFilesBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).DeleteBinlogFilesBefore(ctx, req.(*DeleteBinlogFilesBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ListLocalBinlogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalBinlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ListLocalBinlogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ListLocalBinlogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ListLocalBinlogList(ctx, req.(*ListLocalBinlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HpfsService_ListRemoteBinlogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemoteBinlogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HpfsServiceServer).ListRemoteBinlogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HpfsService/ListRemoteBinlogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HpfsServiceServer).ListRemoteBinlogList(ctx, req.(*ListRemoteBinlogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HpfsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HpfsService",
	HandlerType: (*HpfsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDirectory",
			Handler:    _HpfsService_CreateDirectory_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _HpfsService_CreateFile_Handler,
		},
		{
			MethodName: "CreateSymbolicLink",
			Handler:    _HpfsService_CreateSymbolicLink_Handler,
		},
		{
			MethodName: "ListDirectory",
			Handler:    _HpfsService_ListDirectory_Handler,
		},
		{
			MethodName: "RemoveDirectory",
			Handler:    _HpfsService_RemoveDirectory_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _HpfsService_RemoveFile_Handler,
		},
		{
			MethodName: "TruncateFile",
			Handler:    _HpfsService_TruncateFile_Handler,
		},
		{
			MethodName: "DownloadFiles",
			Handler:    _HpfsService_DownloadFiles_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _HpfsService_UploadFiles_Handler,
		},
		{
			MethodName: "DeleteRemoteFile",
			Handler:    _HpfsService_DeleteRemoteFile_Handler,
		},
		{
			MethodName: "ShowAsyncTaskStatus",
			Handler:    _HpfsService_ShowAsyncTaskStatus_Handler,
		},
		{
			MethodName: "CancelAsyncTask",
			Handler:    _HpfsService_CancelAsyncTask_Handler,
		},
		{
			MethodName: "TransferFiles",
			Handler:    _HpfsService_TransferFiles_Handler,
		},
		{
			MethodName: "ShowDiskUsage",
			Handler:    _HpfsService_ShowDiskUsage_Handler,
		},
		{
			MethodName: "ShowDiskInfo",
			Handler:    _HpfsService_ShowDiskInfo_Handler,
		},
		{
			MethodName: "ControlCgroupsBlkio",
			Handler:    _HpfsService_ControlCgroupsBlkio_Handler,
		},
		{
			MethodName: "OpenBackupBinlog",
			Handler:    _HpfsService_OpenBackupBinlog_Handler,
		},
		{
			MethodName: "CloseBackupBinlog",
			Handler:    _HpfsService_CloseBackupBinlog_Handler,
		},
		{
			MethodName: "UploadLatestBinlogFile",
			Handler:    _HpfsService_UploadLatestBinlogFile_Handler,
		},
		{
			MethodName: "GetWatcherInfoHash",
			Handler:    _HpfsService_GetWatcherInfoHash_Handler,
		},
		{
			MethodName: "DeleteBinlogFilesBefore",
			Handler:    _HpfsService_DeleteBinlogFilesBefore_Handler,
		},
		{
			MethodName: "ListLocalBinlogList",
			Handler:    _HpfsService_ListLocalBinlogList_Handler,
		},
		{
			MethodName: "ListRemoteBinlogList",
			Handler:    _HpfsService_ListRemoteBinlogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hpfs.proto",
}
